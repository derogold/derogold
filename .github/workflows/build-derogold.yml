name: Build DeroGold

on:
  push:
    branches:
      - "master"
      - "development"
  pull_request:

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

jobs:
  build_derogold:
    name: ${{ matrix.build_preset }}
    runs-on: ${{ matrix.os }}
    
    concurrency: 
      group: build_derogold_${{ github.ref }}_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.compiler }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            arch: x64
            compiler: msvc
            install: ""
            configure_preset: windows-x64-msvc-package
            build_preset: windows-x64-msvc-package

          - os: windows-latest
            arch: x64
            compiler: gcc
            install: ""
            msys2_environment: MINGW64
            msys2_install: >-
              mingw-w64-x86_64-ccache
              mingw-w64-x86_64-cmake
              mingw-w64-x86_64-ninja
              mingw-w64-x86_64-toolchain
            configure_preset: windows-x64-mingw-gcc-package
            build_preset: windows-x64-mingw-gcc-package

          - os: windows-latest
            arch: x64
            compiler: clang
            install: ""
            msys2_environment: CLANG64
            msys2_install: >-
              mingw-w64-clang-x86_64-ccache
              mingw-w64-clang-x86_64-cmake
              mingw-w64-clang-x86_64-ninja
              mingw-w64-clang-x86_64-toolchain
            configure_preset: windows-x64-mingw-clang-package
            build_preset: windows-x64-mingw-clang-package

          - os: ubuntu-20.04
            arch: x64
            compiler: gcc
            install: >-
              build-essential
              cmake
              curl
              git
              ninja-build
              pkg-config
              tar
              unzip
              zip
            configure_preset: linux-x64-gcc-package
            build_preset: linux-x64-gcc-package

          - os: ubuntu-20.04
            arch: x64
            compiler: clang
            install: >-
              clang
              cmake
              curl
              git
              ninja-build
              pkg-config
              tar
              unzip
              zip
            configure_preset: linux-x64-clang-package
            build_preset: linux-x64-clang-package

          - os: ubuntu-20.04
            arch: arm64
            compiler: gcc
            install: >-
              cmake
              crossbuild-essential-arm64
              curl
              git
              ninja-build
              pkg-config
              tar
              unzip
              zip
            configure_preset: linux-arm64-gcc-cross-package
            build_preset: linux-arm64-gcc-cross-package

          - os: ubuntu-20.04
            arch: arm64
            compiler: clang
            install: >-
              binutils-aarch64-linux-gnu
              clang
              cmake
              curl
              git
              ninja-build
              pkg-config
              tar
              unzip
              zip
            configure_preset: linux-arm64-clang-cross-package
            build_preset: linux-arm64-clang-cross-package

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Program / Dependencies
        run: |
          if ("${{ runner.os }}" -eq "Windows")
          {
            if (![string]::IsNullOrWhiteSpace("${{ matrix.install }}"))
            {
              choco install ${{ matrix.install }} -y
            }
          }
          elseif ("${{ runner.os }}" -eq "Linux")
          {
            if (![string]::IsNullOrWhiteSpace("${{ matrix.install }}"))
            {
              sudo apt-get update
              sudo apt-get install ${{ matrix.install }} -y
            }
          }
          elseif ("${{ runner.os }}" -eq "macOS")
          {
            if (![string]::IsNullOrWhiteSpace("${{ matrix.install }}"))
            {
              brew update
              brew install ${{ matrix.install }}
            }
          }

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows' && matrix.compiler != 'msvc'
        with:
          update: true
          install: ${{ matrix.msys2_install }}
          msystem: ${{ matrix.msys2_environment }}

      - name: Setup sysroot
        if: runner.os == 'Linux' && matrix.arch == 'arm64' && matrix.compiler == 'clang'
        run: |
          sudo mkdir /usr/local/sysroot
          sudo tar -xzf docker/sysroot/ubuntu-20.04-aarch64-linux-gnu-sysroot.tar.gz -C /usr/local/sysroot

      - name: Setup ccache
        uses: jianmingyong/ccache-action@v1
        with:
          ccache-key-prefix: ccache_cache_${{ runner.os }}_${{ matrix.arch }}_${{ matrix.compiler }}
          max-size: 150M

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11.5

      - name: Build DeroGold (MSYS2)
        if: runner.os == 'Windows' && matrix.compiler != 'msvc'
        working-directory: ${{ github.workspace }}
        shell: msys2 {0}
        run: |
          cmake --preset ${{ matrix.configure_preset }}
          cmake --build --preset ${{ matrix.build_preset }}

      - name: Build DeroGold (MSVC/GCC/CLANG)
        uses: lukka/run-cmake@v10.8
        if: runner.os != 'Windows' || (runner.os == 'Windows' && matrix.compiler == 'msvc')
        with:
          configurePreset: '${{ matrix.configure_preset }}'
          buildPreset: '${{ matrix.build_preset }}'

      - name: Collect Logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}-vcpkg-build-logs
          path: ${{ github.workspace }}/vcpkg/buildtrees/**/*.log
          if-no-files-found: ignore

      - name: Upload Package
        uses: actions/upload-artifact@v4
        if: success() 
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}-build
          path: |
            ${{ github.workspace }}/build/Packaging/*.zip
            ${{ github.workspace }}/build/Packaging/*.tar.gz
            ${{ github.workspace }}/build/Packaging/*.deb
          if-no-files-found: ignore
