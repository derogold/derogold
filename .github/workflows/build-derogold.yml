name: Build DeroGold

on:
  push:
    branches:
      - "master"
      - "development"
  pull_request:

defaults:
  run:
    shell: pwsh

jobs:
  build_derogold:
    name: ${{ matrix.build_preset }}
    runs-on: ${{ matrix.os }}
    
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_MAXSIZE: 150M
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-20.04, macos-12]
        arch: [x64, arm64]
        compiler: [msvc, gcc, clang]

        exclude:
          - os: windows-latest
            arch: arm64
          - os: macos-12
            arch: arm64
          - os: ubuntu-20.04
            compiler: msvc
          - os: macos-12
            compiler: msvc
          - os: macos-12
            compiler: gcc

        include:
          - os: windows-latest
            arch: x64
            compiler: msvc
            install: ""
            configure_preset: windows-x64-msvc-package
            build_preset: windows-x64-msvc-package

          - os: windows-latest
            arch: x64
            compiler: gcc
            install: ""
            msys2_environment: MINGW64
            msys2_install: >-
              mingw-w64-x86_64-ccache
              mingw-w64-x86_64-cmake
              mingw-w64-x86_64-ninja
              mingw-w64-x86_64-toolchain
            configure_preset: windows-x64-mingw-gcc-package
            build_preset: windows-x64-mingw-gcc-package

          - os: windows-latest
            arch: x64
            compiler: clang
            install: ""
            msys2_environment: CLANG64
            msys2_install: >-
              mingw-w64-clang-x86_64-ccache
              mingw-w64-clang-x86_64-cmake
              mingw-w64-clang-x86_64-ninja
              mingw-w64-clang-x86_64-toolchain
            configure_preset: windows-x64-mingw-clang-package
            build_preset: windows-x64-mingw-clang-package

          - os: ubuntu-20.04
            arch: x64
            compiler: gcc
            install: >-
              build-essential
              cmake
              curl
              git
              ninja-build
              pkg-config
              tar
              unzip
              zip
            configure_preset: linux-x64-gcc-package
            build_preset: linux-x64-gcc-package

          - os: ubuntu-20.04
            arch: x64
            compiler: clang
            install: >-
              clang
              cmake
              curl
              git
              ninja-build
              pkg-config
              tar
              unzip
              zip
            configure_preset: linux-x64-clang-package
            build_preset: linux-x64-clang-package

          - os: ubuntu-20.04
            arch: arm64
            compiler: gcc
            install: >-
              cmake
              crossbuild-essential-arm64
              curl
              git
              ninja-build
              pkg-config
              tar
              unzip
              zip
            configure_preset: linux-arm64-gcc-cross-package
            build_preset: linux-arm64-gcc-cross-package

          - os: ubuntu-20.04
            arch: arm64
            compiler: clang
            install: >-
              binutils-aarch64-linux-gnu
              clang
              cmake
              curl
              git
              ninja-build
              pkg-config
              tar
              unzip
              zip
            configure_preset: linux-arm64-clang-cross-package
            build_preset: linux-arm64-clang-cross-package

          - os: macos-12
            arch: x64
            compiler: clang
            install: >-
              cmake
              ninja
              llvm
              pkg-config
            configure_preset: osx-x64-clang-package
            build_preset: osx-x64-clang-package

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Program / Dependencies
        run: |
          if ("${{ runner.os }}" -eq "Windows")
          {
            if (![string]::IsNullOrWhiteSpace("${{ matrix.install }}"))
            {
              choco install ${{ matrix.install }} -y
            }
          }
          elseif ("${{ runner.os }}" -eq "Linux")
          {
            if (![string]::IsNullOrWhiteSpace("${{ matrix.install }}"))
            {
              sudo apt-get update
              sudo apt-get install ${{ matrix.install }} -y
            }
          }
          elseif ("${{ runner.os }}" -eq "macOS")
          {
            if (![string]::IsNullOrWhiteSpace("${{ matrix.install }}"))
            {
              brew update
              brew install ${{ matrix.install }}
            }
          }

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows' && matrix.compiler != 'msvc'
        with:
          update: true
          install: ${{ matrix.msys2_install }}
          msystem: ${{ matrix.msys2_environment }}

      - name: Setup sysroot
        if: runner.os == 'Linux' && matrix.arch == 'arm64' && matrix.compiler == 'clang'
        run: |
          sudo mkdir /usr/local/sysroot
          sudo tar -xzf docker/sysroot/ubuntu-20.04-aarch64-linux-gnu-sysroot.tar.gz -C /usr/local/sysroot

      - name: Checkout ccache
        uses: actions/checkout@v4
        with:
          repository: ccache/ccache
          ref: v4.10.2
          path: ccache
          submodules: recursive

      - name: install ccache
        if: runner.os == 'Windows' && matrix.compiler == 'msvc'
        working-directory: ${{ github.workspace }}/ccache
        run: |
          cmake -D CMAKE_BUILD_TYPE=Release -D ENABLE_TESTING=OFF -D REDIS_STORAGE_BACKEND=OFF -D CMAKE_INSTALL_PREFIX=build -G "Visual Studio 17 2022" -A x64 -T host=x64 -S . -B build
          cmake --build build -t install
          echo "${{ github.workspace }}/ccache/bin" >> $env:GITHUB_PATH

      - name: install ccache
        if: runner.os != 'Windows'
        working-directory: ${{ github.workspace }}/ccache
        run: |
          cmake -D CMAKE_BUILD_TYPE=Release -D ENABLE_TESTING=OFF -D REDIS_STORAGE_BACKEND=OFF -G Ninja -S . -B build
          sudo cmake --build build -t install

      - name: Restore ccache
        id: restore_ccache
        uses: actions/cache/restore@v4.0.2
        with:
          key: ccache_${{ runner.os }}_${{ matrix.arch }}_${{ matrix.compiler }}_${{ hashFiles('.ccache/**', '!.ccache/**/stats') }}
          restore-keys: ccache_${{ runner.os }}_${{ matrix.arch }}_${{ matrix.compiler }}
          path: .ccache/**

      - name: Setup Environment
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Build DeroGold (MSYS2)
        if: runner.os == 'Windows' && matrix.compiler != 'msvc'
        working-directory: ${{ github.workspace }}
        shell: msys2 {0}
        run: |
          cmake --preset ${{ matrix.configure_preset }}
          cmake --build --preset ${{ matrix.build_preset }}

      - name: Build DeroGold (MSVC/GCC/CLANG)
        if: runner.os != 'Windows' || (runner.os == 'Windows' && matrix.compiler == 'msvc')
        working-directory: ${{ github.workspace }}
        run: |
          cmake --preset ${{ matrix.configure_preset }}
          cmake --build --preset ${{ matrix.build_preset }}

      - name: Delete old ccache
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        if: ${{ steps.restore_ccache.outputs.cache-matched-key }} != ${{ hashFiles('.ccache/**', '!.ccache/**/stats') }}
        run: |
          gh extension install actions/gh-actions-cache

          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R ${{ github.repository }} -B ${{ github.ref_name }} -L 100 --key 'ccache_${{ runner.os }}_${{ matrix.arch }}_${{ matrix.compiler }}' | cut -f 1 )

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R ${{ github.repository }} -B ${{ github.ref }} --confirm
          done
          echo "Done"

      - name: Save ccache
        uses: actions/cache/save@v4.0.2
        if: ${{ steps.restore_ccache.outputs.cache-matched-key }} != ${{ hashFiles('.ccache/**', '!.ccache/**/stats') }}
        with:
          key: ccache_${{ runner.os }}_${{ matrix.arch }}_${{ matrix.compiler }}_${{ hashFiles('.ccache/**', '!.ccache/**/stats') }}
          path: .ccache/**

      - name: Collect Logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}-vcpkg-build-logs
          path: ${{ github.workspace }}/vcpkg/buildtrees/**/*.log
          if-no-files-found: ignore

      - name: Upload Package
        uses: actions/upload-artifact@v4
        if: success() 
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}-build
          path: |
            ${{ github.workspace }}/build/Packaging/*.zip
            ${{ github.workspace }}/build/Packaging/*.tar.gz
            ${{ github.workspace }}/build/Packaging/*.deb
          if-no-files-found: ignore
